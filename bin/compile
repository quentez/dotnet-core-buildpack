#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# Fail fast.
set -e

if [ $STACK != "cedar-14" ]; then
	echo "Stack ${STACK} not supported" && exit 1
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# This is where the buildpack is stored.
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

# Export environment.
source $BUILDPACK_DIR/bin/util
export_env_dir ${ENV_DIR}

: ${LIBUNWIND_VERSION:="1.1"}
: ${LIBUNWIND_DOWNLOAD_LOCATION:="https://github.com/cloudfoundry-community/asp.net5-buildpack/releases/download/v0.7/libunwind-cflinuxfs2-${LIBUNWIND_VERSION}.tar.gz"}
: ${DOTNET_VERSION:="1.0.0-preview1-002702"}
: ${DOTNET_INSTALL_LOCATION:="https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0-preview1/scripts/obtain/dotnet-install.sh"}
: ${NODE_VERSION:="5.5.0"}

# Move the app source code into a temporary src dir using a subshell in order not to leak shopt.
SRC_DIR=`mktemp -d`
(
	shopt -s dotglob
	mv ${BUILD_DIR}/* ${SRC_DIR}
)

# Make sure the cache directory exists.
mkdir -p ${CACHE_DIR}

echo "Installing libunwind ${LIBUNWIND_VERSION}"

mkdir -p ${BUILD_DIR}/libunwind
curl ${LIBUNWIND_DOWNLOAD_LOCATION} -Ls | tar xz -C ${BUILD_DIR}/libunwind
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${BUILD_DIR}/libunwind/lib"

echo "Installing Dotnet CLI"

curl -OsSL ${DOTNET_INSTALL_LOCATION}
chmod 755 dotnet-install.sh
DOTNET_INSTALL_SKIP_PREREQS=1 HOME=${BUILD_DIR} ./dotnet-install.sh -v ${DOTNET_VERSION}
export PATH="$PATH:${BUILD_DIR}/.dotnet"

# Detect the project.
DEPLOYMENT_FILE_LOCATION=${SRC_DIR}/.deployment
if [ -n "$PROJECT" ]; then
	PROJECT_JSON_FILE=${SRC_DIR}/${PROJECT}
	echo "Project file configured in PROJECT environment variable"
elif [ -e ${DEPLOYMENT_FILE_LOCATION} ]; then
	PROJECT_JSON_FILE=${SRC_DIR}/$(awk -F "=" '/project/ {print $2}' ${DEPLOYMENT_FILE_LOCATION} | tr -d ' ')
	echo "Project file configured in .deployment file"
else
	PROJECT_JSON_FILES=$(find ${SRC_DIR}/. -maxdepth 3 -iname "project.json")
	printf 'Found %s project.json files\n' $(echo "$PROJECT_JSON_FILES" | wc -l | tr -d ' ')
	PROJECT_JSON_FILE=$(echo "$PROJECT_JSON_FILES" | head -1)
fi
echo "Building ${PROJECT_JSON_FILE}"

dotnet restore ${PROJECT_JSON_FILE}
dotnet publish --output ${BUILD_DIR} --configuration Release ${PROJECT_JSON_FILE}

mkdir -p ${BUILD_DIR}/.profile.d
cp -n ${BUILDPACK_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/

cp ${SRC_DIR}/Procfile ${BUILD_DIR}
